heat_template_version: 2016-10-14

description: Template that installs a k8s cluster resource group and a master node.

#####################################
# PARAMETERS
#####################################
parameters:
  image:
    type: string
    label: Image name or ID
    description: Image to be used for server. Please use an Ubuntu based image.
    default: Ubuntu1604
  flavor:
    type: string
    label: Flavor
    description: Type of instance (flavor) to be used on the compute instance.
    default: k8s-flavor
  key:
    type: string
    label: Key name
    description: Name of key-pair to be installed on the compute instance.
    default: k8s-autoscale
  public_network:
    type: string
    label: Public network name or ID
    description: Public network to attach server to.
    default: public
  cluster_size:
    type: number
    label: Cluster size
    description: Number of instances in cluster.
    default: 1

#####################################
# RESOURCES
#####################################
resources:
  # USERS
  k8s_user:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config: {get_file: "https://raw.githubusercontent.com/taimir/kube-openstack/master/k8s-user.yaml"}

  # NETWORKS
  private_network:
    type: OS::Neutron::Net

  private_subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: private_network }
      cidr: 10.4.0.0/24
      dns_nameservers: [8.8.8.8, 8.8.4.4]
      gateway_ip: 10.4.0.1

  router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info:
        network: { get_param: public_network }

  router_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router }
      subnet: { get_resource: private_subnet }

  secgroup_autoscale:
    type: OS::Neutron::SecurityGroup
    properties:
      rules:
        - protocol: icmp
        - protocol: udp
        - protocol: tcp
          port_range_min: 22
          port_range_max: 22
        - protocol: tcp
          port_range_min: 443
          port_range_max: 443
        - remote_mode: remote_group_id

  # MASTER WAIT CONDITION
  master_wait_handle:
    type: OS::Heat::WaitConditionHandle

  master_wait_condition:
    type: OS::Heat::WaitCondition
    depends_on: master
    properties:
      handle: {get_resource: master_wait_handle}
      timeout: 6000

  provision_instance:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config: |
        #!/bin/bash

        # Install prerequisites
        # 	* docker
        #	* socat
        #	* kubelet (systemd service)
        #	* kubectl (/usr/bin binary)
        # * kubeadm (/usr/bin binary)
        echo "Starting provisioning with kubeadm"
        sudo apt-get update
        sudo apt-get install -y docker.io socat apt-transport-https

        # hack for openstack
        sudo systemctl unmask docker.socket
        sudo systemctl restart docker

        curl -s -L https://storage.googleapis.com/kubeadm/kubernetes-xenial-preview-bundle.txz | tar xJv
        sudo dpkg -i kubernetes-xenial-preview-bundle/*.deb

        # hack for openstack
        sudo sed -i -e 's#KUBELET_EXTRA_ARGS=#KUBELET_EXTRA_ARGS=--cloud-config=/etc/kubernetes/cloud-config.json --cloud-provider=openstack #g' /etc/systemd/system/kubelet.service.d/10-kubeadm.conf

        cat <<EOF > /etc/kubernetes/cloud-config.json
        [global]
        auth-url=http://172.31.0.101:5000/v2.0
        username=mirchev
        password=secret
        tenant-id=91908fb11f60410eb2574d9fcea3fd52
        tenant-name=k8s-autoscale
        # domain-id=default
        # domain-name=Default
        EOF

        sudo systemctl daemon-reload
        sudo systemctl restart kubelet

  install_master:
    type: OS::Heat::MultipartMime
    properties:
      parts:
        - config: {get_resource: k8s_user}
        - config: {get_resource: provision_instance}
        - config:
            str_replace:
              template: |
                #!/bin/bash
                kubeadm init --token 30f54b.f400ed0dc93169df --pod-network-cidr 10.17.0.0/16 --cloud-provider openstack
                $wait_notify --data-binary '{"status": "SUCCESS"}' || $wait_notify --data-binary '{"status": "FAILURE"}' &
              params:
                $wait_notify: {get_attr: [master_wait_handle, curl_cli]}

  # MASTER NODE
  master:
    type: OS::Nova::Server
    properties:
      image: {get_param: image}
      flavor: {get_param: flavor}
      key_name: {get_param: key}
      personality: {"/home/k8s/heat-config.ini": {get_file: "https://raw.githubusercontent.com/taimir/kube-openstack/master/heat-config.ini"}, "/home/k8s/deployment.yaml": {get_file: "https://raw.githubusercontent.com/taimir/kube-openstack/master/deployment.yaml"}}
      user_data_format: RAW
      user_data: {get_resource: install_master}
      networks:
        - port: {get_resource: kube_master_eth0}

  kube_master_eth0:
    type: OS::Neutron::Port
    properties:
      network: {get_resource: private_network}
      security_groups:
        - {get_resource: secgroup_autoscale}
      fixed_ips:
        - ip_address: 10.4.0.3

  kube_master_floating:
      type: OS::Neutron::FloatingIP
      properties:
        floating_network: {get_param: public_network}
        port_id: {get_resource: kube_master_eth0}

  # MINION NODES
  install_minion:
    type: OS::Heat::MultipartMime
    properties:
      parts:
        - config: {get_resource: k8s_user}
        - config: {get_resource: provision_instance}
        - config:
            str_replace:
              template: |
                #!/bin/bash
                kubeadm join --token 30f54b.f400ed0dc93169df $master_ip
              params:
                $master_ip: {get_attr: [kube_master_eth0, fixed_ips, 0, ip_address]}

  node_cluster:
    type: OS::Heat::AutoScalingGroup
    depends_on:
      - master_wait_condition
    properties:
      min_size: 0
      max_size: 10
      desired_capacity: { get_param: cluster_size }
      # count: { get_param: cluster_size }
      resource:
        type: minion.yaml
        properties:
          private_network: {get_resource: private_network}
          private_subnet: {get_resource: private_subnet}
          public_network: {get_param: public_network}
          secgroup_autoscale: {get_resource: secgroup_autoscale}
          # provisioning and general config
          install_minion: {get_resource: install_minion}
          kube_master_eth0: {get_resource: kube_master_eth0}
          image: {get_param: image}
          flavor: {get_param: flavor}
          key: {get_param: key}
